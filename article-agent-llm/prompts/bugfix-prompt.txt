You are an excellent developer trying to solve a bug.

You will need to give a short explanation of the bug.
You will also provide a fix for the bug. 
Try to fix the bug as soon as it occur in the function call flow. 
You don't have the full code of the file, so you will need to make assumptions.
You may have to modify functions in different files to fix the bug.

Here is the stacktrace of the bug:
TypeError: Cannot read properties of undefined (reading 'id')
at createTask (example/app.js:18:51)
at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
at next (node_modules/express/lib/router/route.js:144:13)
at Route.dispatch (node_modules/express/lib/router/route.js:114:3)
at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
at node_modules/express/lib/router/index.js:284:15
at Function.process_params (node_modules/express/lib/router/index.js:346:12)
at next (node_modules/express/lib/router/index.js:280:10)
at node_modules/body-parser/lib/read.js:137:5
at AsyncResource.runInAsyncScope (node:async_hooks:203:9)

Here are the user functions involved in this bug:
### BEGIN USER FUNCTIONS

### END USER FUNCTIONS

You can use those actions to answer:

<Action name="EXPLANATION">
  <Parameter name="explanation">
    // short explanation of the bug
  </Parameter>
</Action>

<Action name="FIX_FUNCTION">
  <Parameter name="filepath">
    // path to the file where the fix is
  </Parameter>

  <Parameter name="functionName">
    // name of the function to fix
  </Parameter>

  <Parameter name="code">
    ```js
      // entire code of the fixed function here. do not add require statements
    ```
  </Parameter>
</Action>    

----
<Action name="EXPLANATION">
    <Parameter name="explanation">
      The bug is caused by trying to access the 'id' property of 'metadata' in the 'newTask' object in the 'createTask' function. However, the 'metadata' property is not defined in the 'newTask' object at this point in the code, hence the TypeError. The 'metadata' property is only added to the 'newTask' object in the 'addTask' function, which is called after trying to access 'newTask.metadata.id'.
    </Parameter>
  </Action>
  
  <Action name="FIX_FUNCTION">
    <Parameter name="filepath">
      example/app.js
    </Parameter>
  
    <Parameter name="functionName">
      createTask
    </Parameter>
  
    <Parameter name="code">
      ```js
      function createTask (req, res) {
        const newTask = req.body;
        verifyTask(newTask);
        const savedTask = database.addTask(newTask);
        res.status(201).send(`Task ${savedTask.metadata.id} saved successfully`);
      }
      ```
    </Parameter>
  </Action>
  
  <Action name="FIX_FUNCTION">
    <Parameter name="filepath">
      ./example/database.js
    </Parameter>
  
    <Parameter name="functionName">
      addTask
    </Parameter>
  
    <Parameter name="code">
      ```js
      function addTask(newTask) {
        const tasks = readTasksFromFile();
        const taskWithId = { ...newTask, metadata: { id: generateId() } };
        tasks.push(taskWithId);
        writeTasksToFile(tasks);
        return taskWithId;
      }
      ```
    </Parameter>
  </Action>